<?php

namespace Tests\Unit;

use App\Models\Post\Content;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Rinvex\Categories\Models\Category;
use Tests\TestCase;

class Categorizable extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    /** @var Category */
    private $category;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->category = app('rinvex.categories.category');
    }

    public function initData()
    {
        factory(\Rinvex\Categories\Models\Category::class, 10)->create()->each(function ($category) {
            for ($i = 0; $i < 5; $i++) {
                $instance = factory(\Rinvex\Categories\Models\Category::class)->create();
                $category->appendNode($instance);

                for ($i = 0; $i < 5; $i++) {
                    $instance->appendNode(factory(\Rinvex\Categories\Models\Category::class)->create());
                }
            }
        });

        factory(\App\Models\Post\Post::class, 10)->create()->each(function (\App\Models\Post\Post $item) {
            $item->content()->save(factory(Content::class)->make());

            $item->attachCategories([mt_rand(1, 5), mt_rand(6, 10)]);
        });
    }


    /** @test */
    public function overviewData()
    {
        $this->initData();

        /** @var \App\Models\Post\Post $post */
        $post = \App\Models\Post\Post::find(1);
        $this->assertEquals(2, $post->categories->count());

        $post->detachCategories($post->categories[0]->id);
        $post->refresh();

        $this->assertEquals(1, $post->categories->count());
    }

    /** @test */
    public function tree()
    {
        $this->initData();

        dump($this->category->descendantsAndSelf(1)->toTree()->toArray());

        $this->assertTrue(true);
    }
}
